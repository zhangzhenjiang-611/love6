<?php
/**
 * Created by PhpStorm.
 * User: 15691
 * Date: 2020/4/3
 * Time: 17:10
 */

namespace app\index\model;


use think\Model;
use think\model\concern\SoftDelete;

class User extends Model
{
    //protected $pk = 'loginip'; //设置主键

  //  protected $table = 'hd_role'; //设置其他表
    //引入trait 模型软删除
    use SoftDelete;
    protected $deleteTime = 'delete_time';
    //开启自动时间戳
    protected $autoWriteTimestamp =  'datetime';
    protected $createTime = 'create_at';
    protected $updateTime = false;

    //设置只读字段 不可修改
    protected $readonly = ['username'];


    //设置类型转换
    protected $type = [
        'num'   =>   'string',
        'create_at'   =>   'datetime:Y-m-d',
        'email'   =>   'integer',
    ];

    //自动完成
    protected $auto = [
        'email'

    ];
    protected $insert = [
        'num' => 1  //新增数据的时候填充

    ];
    protected $update = [
        //'email'

    ];
    //初始化模型方法
    protected  static function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        echo '初始化模型方法'."<br>";
    }

    public function getPwd() {
     // return self::where('username','dvd')->find()->password;
      return self::where('username','dvd')->find()->getAttr('username');
    }

    //创建获取器
    public function getStatusAttr($value) {
        $arr = [
            -1 => '禁用',
            0 => '审核中',
            1 => '正常'
        ];
        return $arr[$value];
    }

    //创建一个虚拟获取器，可以对多个字段进行过滤
    public function getNothingAttr($value,$data) {
        $arr = [
            -1 => '禁用',
            0 => '审核中',
            1 => '正常'
        ];
        return $arr[$data['status']];
    }
    //创建一个修改器
    public function setEmailAttr($value) {
        return strtoupper($value);
    }

    //创建一个搜索器
    public function  searchEmailAttr($query,$value) {
        $query->where('email','like',$value.'%');
    }

    //创建一个限定时间搜索器
    public function searchCreateAtAttr($query,$value) {
        $query->whereBetweenTime('create_at',$value[0],$value[1]);
    }


    //封装模型查询范围
    public function scopeSex($query) {
        $query->where('sex',2)->limit(4);
    }

    //封装模型多个查询范围
    public function scopeEmailLike($query,$value) {
        $query->where('email','like','%'.$value.'%');
    }

    public function scopeNum($query,$value) {
        $query->where('num','>',$value);
    }

}